# Generated from Arara.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,183,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,
        119,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,144,
        8,16,1,17,1,17,1,17,1,17,3,17,150,8,17,1,18,1,18,1,19,1,19,1,19,
        1,19,5,19,158,8,19,10,19,12,19,161,9,19,1,19,1,19,1,20,4,20,166,
        8,20,11,20,12,20,167,1,21,1,21,5,21,172,8,21,10,21,12,21,175,9,21,
        1,22,4,22,178,8,22,11,22,12,22,179,1,22,1,22,0,0,23,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,1,0,7,2,0,43,43,
        45,45,2,0,42,42,47,47,2,0,34,34,92,92,1,0,48,57,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,194,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,52,1,0,0,0,5,60,1,0,
        0,0,7,63,1,0,0,0,9,69,1,0,0,0,11,75,1,0,0,0,13,81,1,0,0,0,15,90,
        1,0,0,0,17,95,1,0,0,0,19,118,1,0,0,0,21,120,1,0,0,0,23,122,1,0,0,
        0,25,124,1,0,0,0,27,126,1,0,0,0,29,129,1,0,0,0,31,131,1,0,0,0,33,
        143,1,0,0,0,35,149,1,0,0,0,37,151,1,0,0,0,39,153,1,0,0,0,41,165,
        1,0,0,0,43,169,1,0,0,0,45,177,1,0,0,0,47,48,5,108,0,0,48,49,5,101,
        0,0,49,50,5,105,0,0,50,51,5,97,0,0,51,2,1,0,0,0,52,53,5,101,0,0,
        53,54,5,115,0,0,54,55,5,99,0,0,55,56,5,114,0,0,56,57,5,101,0,0,57,
        58,5,118,0,0,58,59,5,97,0,0,59,4,1,0,0,0,60,61,5,115,0,0,61,62,5,
        101,0,0,62,6,1,0,0,0,63,64,5,101,0,0,64,65,5,110,0,0,65,66,5,116,
        0,0,66,67,5,97,0,0,67,68,5,111,0,0,68,8,1,0,0,0,69,70,5,115,0,0,
        70,71,5,101,0,0,71,72,5,110,0,0,72,73,5,97,0,0,73,74,5,111,0,0,74,
        10,1,0,0,0,75,76,5,102,0,0,76,77,5,105,0,0,77,78,5,109,0,0,78,79,
        5,115,0,0,79,80,5,101,0,0,80,12,1,0,0,0,81,82,5,101,0,0,82,83,5,
        110,0,0,83,84,5,113,0,0,84,85,5,117,0,0,85,86,5,97,0,0,86,87,5,110,
        0,0,87,88,5,116,0,0,88,89,5,111,0,0,89,14,1,0,0,0,90,91,5,102,0,
        0,91,92,5,97,0,0,92,93,5,99,0,0,93,94,5,97,0,0,94,16,1,0,0,0,95,
        96,5,102,0,0,96,97,5,105,0,0,97,98,5,109,0,0,98,99,5,101,0,0,99,
        100,5,110,0,0,100,101,5,113,0,0,101,102,5,117,0,0,102,103,5,97,0,
        0,103,104,5,110,0,0,104,105,5,116,0,0,105,106,5,111,0,0,106,18,1,
        0,0,0,107,108,5,105,0,0,108,109,5,110,0,0,109,110,5,116,0,0,110,
        111,5,101,0,0,111,112,5,105,0,0,112,113,5,114,0,0,113,119,5,111,
        0,0,114,115,5,114,0,0,115,116,5,101,0,0,116,117,5,97,0,0,117,119,
        5,108,0,0,118,107,1,0,0,0,118,114,1,0,0,0,119,20,1,0,0,0,120,121,
        5,40,0,0,121,22,1,0,0,0,122,123,5,41,0,0,123,24,1,0,0,0,124,125,
        5,59,0,0,125,26,1,0,0,0,126,127,5,60,0,0,127,128,5,45,0,0,128,28,
        1,0,0,0,129,130,7,0,0,0,130,30,1,0,0,0,131,132,7,1,0,0,132,32,1,
        0,0,0,133,134,5,61,0,0,134,144,5,61,0,0,135,136,5,33,0,0,136,144,
        5,61,0,0,137,144,5,60,0,0,138,139,5,60,0,0,139,144,5,61,0,0,140,
        144,5,62,0,0,141,142,5,62,0,0,142,144,5,61,0,0,143,133,1,0,0,0,143,
        135,1,0,0,0,143,137,1,0,0,0,143,138,1,0,0,0,143,140,1,0,0,0,143,
        141,1,0,0,0,144,34,1,0,0,0,145,146,5,38,0,0,146,150,5,38,0,0,147,
        148,5,124,0,0,148,150,5,124,0,0,149,145,1,0,0,0,149,147,1,0,0,0,
        150,36,1,0,0,0,151,152,5,33,0,0,152,38,1,0,0,0,153,159,5,34,0,0,
        154,158,8,2,0,0,155,156,5,92,0,0,156,158,9,0,0,0,157,154,1,0,0,0,
        157,155,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,
        160,162,1,0,0,0,161,159,1,0,0,0,162,163,5,34,0,0,163,40,1,0,0,0,
        164,166,7,3,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,
        167,168,1,0,0,0,168,42,1,0,0,0,169,173,7,4,0,0,170,172,7,5,0,0,171,
        170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,
        44,1,0,0,0,175,173,1,0,0,0,176,178,7,6,0,0,177,176,1,0,0,0,178,179,
        1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,182,
        6,22,0,0,182,46,1,0,0,0,9,0,118,143,149,157,159,167,173,179,1,6,
        0,0
    ]

class AraraLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LEIA = 1
    ESCREVA = 2
    SE = 3
    ENTAO = 4
    SENAO = 5
    FIMSE = 6
    ENQUANTO = 7
    FACA = 8
    FIMENQ = 9
    TIPO = 10
    LPAREN = 11
    RPAREN = 12
    SEMICOLON = 13
    ATRIB = 14
    OPSUM = 15
    OPMULT = 16
    OPCOMP = 17
    OPLOG = 18
    NOT = 19
    STRING = 20
    INT = 21
    ID = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'leia'", "'escreva'", "'se'", "'entao'", "'senao'", "'fimse'", 
            "'enquanto'", "'faca'", "'fimenquanto'", "'('", "')'", "';'", 
            "'<-'", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "LEIA", "ESCREVA", "SE", "ENTAO", "SENAO", "FIMSE", "ENQUANTO", 
            "FACA", "FIMENQ", "TIPO", "LPAREN", "RPAREN", "SEMICOLON", "ATRIB", 
            "OPSUM", "OPMULT", "OPCOMP", "OPLOG", "NOT", "STRING", "INT", 
            "ID", "WS" ]

    ruleNames = [ "LEIA", "ESCREVA", "SE", "ENTAO", "SENAO", "FIMSE", "ENQUANTO", 
                  "FACA", "FIMENQ", "TIPO", "LPAREN", "RPAREN", "SEMICOLON", 
                  "ATRIB", "OPSUM", "OPMULT", "OPCOMP", "OPLOG", "NOT", 
                  "STRING", "INT", "ID", "WS" ]

    grammarFileName = "Arara.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None

